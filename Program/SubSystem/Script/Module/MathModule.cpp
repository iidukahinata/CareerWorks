/**
* @file    MathModule.cpp
* @brief
*
* @date	   2022/11/13 2022îNìxèâî≈
*/


#include "ModuleHelper.h"
#include "Subsystem/Core/Math/Vector2.h"
#include "Subsystem/Core/Math/Vector3.h"
#include "Subsystem/Core/Math/Vector4.h"
#include "Subsystem/Core/Math/Quaternion.h"
#include "Subsystem/Core/Math/Matrix.h"

void SetUpMathModule()
{
    using namespace Math;

    float& (Vector2::*at1)(int) = &Vector2::operator[];

    PY_CLASS(Vector2)
        PY_CLASS_DEF_INIT(float)
        PY_CLASS_DEF_INIT(const Vector2&)
        PY_CLASS_DEF_INIT(float, float)
        PY_READ_WRITE(Vector2, x)
        PY_READ_WRITE(Vector2, y)
        PY_READ_ONLY(Vector2, Zero)
        PY_READ_ONLY(Vector2, One)
        PY_READ_ONLY(Vector2, Up)
        PY_READ_ONLY(Vector2, Down)
        PY_READ_ONLY(Vector2, Right)
        PY_READ_ONLY(Vector2, Left)
        .def(-boost::python::self)
        .def(boost::python::self + Vector2())
        .def(boost::python::self + float())
        .def(boost::python::self - Vector2())
        .def(boost::python::self - float())
        .def(boost::python::self * Vector2())
        .def(boost::python::self * float())
        .def(boost::python::self / Vector2())
        .def(boost::python::self / float())
        .def(boost::python::self += Vector2())
        .def(boost::python::self += float())
        .def(boost::python::self -= Vector2())
        .def(boost::python::self -= float())
        .def(boost::python::self *= Vector2())
        .def(boost::python::self *= float())
        .def(boost::python::self /= Vector2())
        .def(boost::python::self /= float())
        .def(boost::python::self == Vector2())
        .def(boost::python::self != Vector2())
        .def("at", at1, PY_NOT_CONST_REF)
        PY_CLASS_DEF(Vector2, Lerp)
        PY_CLASS_DEF(Vector2, Slerp)
        PY_CLASS_DEF(Vector2, Cross)
        PY_CLASS_DEF(Vector2, Dot)
        PY_CLASS_DEF(Vector2, Normalize)
        PY_CLASS_DEF(Vector2, GetLenght)
        PY_CLASS_DEF(Vector2, GetSquaredLength)
        PY_CLASS_DEF(Vector2, Distance)
        PY_CLASS_DEF(Vector2, DistanceSquared)
        PY_CLASS_DEF(Vector2, Normalize)
        PY_CLASS_DEF(Vector2, Equals)
        PY_CLASS_DEF(Vector2, ToString);

    float& (Vector3::*at2)(int) = &Vector3::operator[];

    PY_CLASS(Vector3)
        PY_CLASS_DEF_INIT(float)
        PY_CLASS_DEF_INIT(const Vector3&)
        PY_CLASS_DEF_INIT(float, float, float)
        PY_READ_WRITE(Vector3, x)
        PY_READ_WRITE(Vector3, y)
        PY_READ_WRITE(Vector3, z)
        PY_READ_ONLY(Vector3, Zero)
        PY_READ_ONLY(Vector3, One)
        PY_READ_ONLY(Vector3, Up)
        PY_READ_ONLY(Vector3, Down)
        PY_READ_ONLY(Vector3, Forward)
        PY_READ_ONLY(Vector3, BackForward)
        PY_READ_ONLY(Vector3, Right)
        PY_READ_ONLY(Vector3, Left)
        .def(-boost::python::self)
        .def(boost::python::self + Vector3())
        .def(boost::python::self + float())
        .def(boost::python::self - Vector3())
        .def(boost::python::self - float())
        .def(boost::python::self * Vector3())
        .def(boost::python::self * float())
        .def(boost::python::self / Vector3())
        .def(boost::python::self / float())
        .def(boost::python::self += Vector3())
        .def(boost::python::self += float())
        .def(boost::python::self -= Vector3())
        .def(boost::python::self -= float())
        .def(boost::python::self *= Vector3())
        .def(boost::python::self *= float())
        .def(boost::python::self /= Vector3())
        .def(boost::python::self /= float())
        .def(boost::python::self == Vector3())
        .def(boost::python::self != Vector3())
        .def("at", at2, PY_NOT_CONST_REF)
        PY_CLASS_DEF(Vector3, Lerp)
        PY_CLASS_DEF(Vector3, Slerp)
        PY_CLASS_DEF(Vector3, Cross)
        PY_CLASS_DEF(Vector3, Dot)
        PY_CLASS_DEF(Vector3, Normalize)
        PY_CLASS_DEF(Vector3, GetLenght)
        PY_CLASS_DEF(Vector3, GetSquaredLength)
        PY_CLASS_DEF(Vector3, Distance)
        PY_CLASS_DEF(Vector3, DistanceSquared)
        PY_CLASS_DEF(Vector3, Normalize)
        PY_CLASS_DEF(Vector3, Equals)
        PY_CLASS_DEF(Vector3, ToString);

    float& (Vector4::*at3)(int) = &Vector4::operator[];

    PY_CLASS(Vector4)
        PY_CLASS_DEF_INIT(float)
        PY_CLASS_DEF_INIT(const Vector4&)
        PY_CLASS_DEF_INIT(float, float, float, float)
        PY_READ_WRITE(Vector4, x)
        PY_READ_WRITE(Vector4, y)
        PY_READ_WRITE(Vector4, z)
        PY_READ_WRITE(Vector4, w)
        .def(-boost::python::self)
        .def(boost::python::self + Vector4())
        .def(boost::python::self + float())
        .def(boost::python::self - Vector4())
        .def(boost::python::self - float())
        .def(boost::python::self * Vector4())
        .def(boost::python::self * float())
        .def(boost::python::self / Vector4())
        .def(boost::python::self / float())
        .def(boost::python::self += Vector4())
        .def(boost::python::self += float())
        .def(boost::python::self -= Vector4())
        .def(boost::python::self -= float())
        .def(boost::python::self *= Vector4())
        .def(boost::python::self *= float())
        .def(boost::python::self /= Vector4())
        .def(boost::python::self /= float())
        .def(boost::python::self == Vector4())
        .def(boost::python::self != Vector4())
        .def("at", at3, PY_NOT_CONST_REF)
        PY_CLASS_DEF(Vector4, Dot)
        PY_CLASS_DEF(Vector4, Normalize)
        PY_CLASS_DEF(Vector4, GetLenght)
        PY_CLASS_DEF(Vector4, GetSquaredLength)
        PY_CLASS_DEF(Vector4, Distance)
        PY_CLASS_DEF(Vector4, DistanceSquared)
        PY_CLASS_DEF(Vector4, Normalize)
        PY_CLASS_DEF(Vector4, Equals)
        PY_CLASS_DEF(Vector4, ToString);

    Matrix (*createRot1)(const Quaternion&) = &Matrix::CreateRotation;
    Matrix (*createRot2)(const Vector3&) = &Matrix::CreateRotation;

    PY_CLASS(Matrix)
        PY_READ_ONLY(Matrix, Identity)
        .def(boost::python::self + Matrix())
        .def(boost::python::self * Matrix())
        .def(boost::python::self * float())
        .def(boost::python::self += Matrix())
        .def(boost::python::self *= Matrix())
        .def(boost::python::self *= float())
        .def(boost::python::self == Matrix())
        .def(boost::python::self != Matrix())
        PY_CLASS_DEF(Matrix, CreateTranslation)
        .def("CreateRotFromQuaternion", createRot1)
        .def("CreateRotFromVector3", createRot1)
        PY_CLASS_DEF(Matrix, CreateScaling)
        PY_CLASS_DEF(Matrix, CreatePerspectiveFovLH)
        PY_CLASS_DEF(Matrix, CreateOrthographicLH)
        PY_CLASS_DEF(Matrix, TransformPosition)
        PY_CLASS_DEF(Matrix, Transposed)
        PY_CLASS_DEF(Matrix, Transpose)
        PY_CLASS_DEF(Matrix, Inverse)
        PY_CLASS_DEF(Matrix, GetTranslation)
        PY_CLASS_DEF(Matrix, GetEulerAngles)
        PY_CLASS_DEF(Matrix, GetScale)
        PY_CLASS_DEF(Matrix, Equals)
        PY_CLASS_DEF(Matrix, ToString);

    PY_CLASS(Quaternion)
        PY_CLASS_DEF_INIT(const Quaternion&)
        PY_READ_WRITE(Quaternion, x)
        PY_READ_WRITE(Quaternion, y)
        PY_READ_WRITE(Quaternion, z)
        PY_READ_WRITE(Quaternion, w)
        PY_READ_ONLY(Quaternion, Identity)
        .def(-boost::python::self)
        .def(boost::python::self + Quaternion())
        .def(boost::python::self - Quaternion())
        .def(boost::python::self * Quaternion())
        .def(boost::python::self * float())
        .def(boost::python::self * Vector3())
        .def(boost::python::self += Quaternion())
        .def(boost::python::self -= Quaternion())
        .def(boost::python::self *= Quaternion())
        .def(boost::python::self *= float())
        .def(boost::python::self == Quaternion())
        .def(boost::python::self != Quaternion())
        PY_CLASS_DEF(Quaternion, Normalize)
        PY_CLASS_DEF(Quaternion, Normalized)
        PY_CLASS_DEF(Quaternion, GetEuler)
        PY_CLASS_DEF(Quaternion, FromEuler)
        PY_CLASS_DEF(Quaternion, FromYawPitchRool)
        PY_CLASS_DEF(Quaternion, Dot)
        PY_CLASS_DEF(Quaternion, Equals)
        PY_CLASS_DEF(Quaternion, ToString);
}